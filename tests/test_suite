#!/bin/sh

. lib/functions

fuse()
{
    echo "Running tests from fuse"
    # create the filesystem
    mkdir -p sandbox/sharebox.fs sandbox/sharebox.mnt
    mkfs -t sharebox sandbox/sharebox.fs > /dev/null

    # mount it
    sharebox sandbox/sharebox.fs sandbox/sharebox.mnt

    # run the fuse tests
    assert_success fuse_tester $PWD/sandbox/sharebox.mnt
    debug_interrupt

    # unmount
    fusermount -u -z sandbox/sharebox.mnt > /dev/null

    clean
}

sync_simple()
{
    echo "simple synchronization"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    make_peers local remote
    echo "test" >> sandbox/local/mnt/test_file
    echo "pull remote" > sandbox/local/mnt/.command
    # after sync, the file must exist
    assert_success test -e test/remote/mnt/test_file
    # but diffing should fail because it is recorded as size 0
    assert_fail diff test/local/mnt/test_file test/remote/mnt/test_file
    # diffing should work the second time (opened by the first diff, so it
    # has been downloaded)
    assert_success diff test/local/mnt/test_file test/remote/mnt/test_file
    debug_interrupt

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_normal_conflict()
{
    echo "synchronization with normal conflict"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    make_peers local remote
    echo "test_line" >> test/local/mnt/test_file
    ./sharebox.py -c sync test/remote/mnt
    assert_success test -e test/remote/mnt/test_file
    touch test/remote/mnt/test_file
    echo "test_line_local" >> test/local/mnt/test_file
    echo "test_line_remote" >> test/remote/mnt/test_file
    ./sharebox.py -c sync test/remote/mnt
    # but diffing should fail
    assert_fail diff test/local/mnt/test_file test/remote/mnt/test_file
    debug_interrupt

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_delete_conflict()
{
    echo "synchronization with delete conflict"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    make_peers local remote
    echo "test_line" >> test/local/mnt/test_file
    ./sharebox.py -c sync test/remote/mnt
    assert_success test -e test/remote/mnt/test_file
    touch test/remote/mnt/test_file
    echo "test_line_remote" >> test/remote/mnt/test_file
    rm test/local/mnt/test_file
    ./sharebox.py -c sync test/remote/mnt
    # diffing should fail
    assert_fail diff test/local/mnt/test_file test/remote/mnt/test_file
    debug_interrupt

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

fuse
