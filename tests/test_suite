#!/bin/sh

. lib/functions

fuse()
{
    echo "Running tests from fuse"
    # create the filesystem
    mkdir -p sandbox/sharebox.fs sandbox/sharebox.mnt
    mkfs -t sharebox sandbox/sharebox.fs > /dev/null

    # mount it
    sharebox sandbox/sharebox.fs sandbox/sharebox.mnt

    # run the fuse tests
    assert_success fuse_tester $PWD/sandbox/sharebox.mnt

    # unmount
    fusermount -u -z sandbox/sharebox.mnt > /dev/null

    clean
}

sync_success()
{
    echo "Simple synchronization"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # add local as a peer of remote
    # syntax: peer_alias <alias> <master-git-url>
    assert_success echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # create a file on local side
    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # trigger a synchronization on remote side
    assert_success echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # after sync, the file must exist
    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    # but diffing should fail because it is recorded as size 0
    assert_fail diff sandbox/local/sharebox.mnt/test_file sandbox/remote/sharebox.mnt/test_file

    # diffing should work the second time (the file was opened by the
    # first diff, so it has been downloaded)
    assert_success diff sandbox/local/sharebox.mnt/test_file sandbox/remote/sharebox.mnt/test_file

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_no_peers()
{
    echo "Synchronisation and missing peer"
    # create the filesystem
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null

    # mount it
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt

    # trigger a synchronization
    assert_fail echo "get_changes unexisting_peer" > sandbox/local/sharebox.mnt/.command

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null

    clean
}

sync_bad_url()
{
    echo "bad url"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # add local with a bad url
    assert_success echo "peer_alias local bad_url" > sandbox/remote/sharebox.mnt/.command

    # triggering a synchronization on remote side should fail
    assert_fail echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_modify_url()
{
    echo "change url"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # add local with a bad url
    assert_success echo "peer_alias local bad_url" > sandbox/remote/sharebox.mnt/.command

    # create a file on local side
    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # triggering a synchronization on remote side should fail
    assert_fail echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # relocate the url
    assert_success echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # triggering a synchronization on remote side should now succed
    assert_success echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # after sync, the file must exist
    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    # but diffing should fail because it is recorded as size 0
    assert_fail diff sandbox/local/sharebox.mnt/test_file sandbox/remote/sharebox.mnt/test_file

    # diffing should work the second time (the file was opened by the
    # first diff, so it has been downloaded)
    assert_success diff sandbox/local/sharebox.mnt/test_file sandbox/remote/sharebox.mnt/test_file

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_remove_peer()
{
    echo "removing a peer"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # add local as a peer of remote
    # syntax: peer_alias <alias> <master-git-url>
    echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # trigger a synchronization on remote side
    echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # trigger a synchronization on remote side
    echo "peer_remove local" > sandbox/remote/sharebox.mnt/.command

    # trigger a synchronization on remote side
    assert_fail echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_normal_conflict()
{
    echo "synchronization with normal conflict"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # make them peers
    echo "peer_alias remote $PWD/sandbox/remote/sharebox.fs/master" > sandbox/local/sharebox.mnt/.command
    echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # create a file on local side
    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # trigger a synchronization on remote side
    echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # test the file has been created on remote side
    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    # get the content of the file
    touch sandbox/remote/sharebox.mnt/test_file

    # operate incompatible modifications on test_file
    echo "test_line_local" > sandbox/local/sharebox.mnt/test_file
    echo "test_line_remote" > sandbox/remote/sharebox.mnt/test_file

    # import the changes in local
    echo "get_changes remote" > sandbox/remote/sharebox.mnt/.command

    # a conflicting file should exist, containing the content of remote
    assert_success ls -a sandbox/remote/sharebox.mnt | grep ".test_file.remote"

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_resolve_normal_conflict_local()
{
    echo "resolving a normal conflict in favor of local"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # make them peers
    echo "peer_alias remote $PWD/sandbox/remote/sharebox.fs/master" > sandbox/local/sharebox.mnt/.command
    echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # create a file on local side
    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # trigger a synchronization on remote side
    echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # test the file has been created on remote side
    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    # get the content of the file
    touch sandbox/remote/sharebox.mnt/test_file

    # operate incompatible modifications on test_file
    echo "test_line_local" > sandbox/local/sharebox.mnt/test_file
    echo "test_line_remote" > sandbox/remote/sharebox.mnt/test_file

    # import the changes in local
    echo "get_changes remote" > sandbox/remote/sharebox.mnt/.command

    # a conflicting file should exist, containing the content of remote
    conflict=$(ls -a1 sandbox/remote/sharebox.mnt | grep ".test_file.remote")

    rm $conflict

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_resolve_normal_conflict_remote()
{
    echo "resolving a normal conflict in favor of remote"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # make them peers
    echo "peer_alias remote $PWD/sandbox/remote/sharebox.fs/master" > sandbox/local/sharebox.mnt/.command
    echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    # create a file on local side
    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # trigger a synchronization on remote side
    echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    # test the file has been created on remote side
    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    # get the content of the file
    touch sandbox/remote/sharebox.mnt/test_file

    # operate incompatible modifications on test_file
    echo "test_line_local" > sandbox/local/sharebox.mnt/test_file
    echo "test_line_remote" > sandbox/remote/sharebox.mnt/test_file

    # import the changes in local
    echo "get_changes remote" > sandbox/remote/sharebox.mnt/.command

    # a conflicting file should exist, containing the content of remote
    conflict=$(ls -a1 sandbox/remote/sharebox.mnt | grep ".test_file.remote")

    cp $conflict test_file
    rm $conflict

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

sync_delete_conflict()
{
    echo "synchronization with delete conflict"
    # create the filesystems
    mkdir -p sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    mkfs -t sharebox sandbox/local/sharebox.fs > /dev/null
    mkdir -p sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt
    mkfs -t sharebox sandbox/remote/sharebox.fs > /dev/null

    # mount them
    sharebox sandbox/local/sharebox.fs sandbox/local/sharebox.mnt
    sharebox sandbox/remote/sharebox.fs sandbox/remote/sharebox.mnt

    # make them peers
    echo "peer_alias remote $PWD/sandbox/remote/sharebox.fs/master" > sandbox/local/sharebox.mnt/.command
    echo "peer_alias local $PWD/sandbox/local/sharebox.fs/master" > sandbox/remote/sharebox.mnt/.command

    echo "test_line" > sandbox/local/sharebox.mnt/test_file

    # import the changes in remote
    echo "get_changes local" > sandbox/remote/sharebox.mnt/.command

    assert_success test -e sandbox/remote/sharebox.mnt/test_file

    touch sandbox/remote/sharebox.mnt/test_file

    # removing on local, modifying on remote
    echo "test_line_remote" > sandbox/remote/sharebox.mnt/test_file
    rm sandbox/local/sharebox.mnt/test_file

    # import the changes in remote
    echo "get_changes remote" > sandbox/local/sharebox.mnt/.command

    # a conflicting file should exist, containing the content of remote
    assert_success ls -a1 sandbox/remote/sharebox.mnt | grep ".test_file.remote"

    # unmount the filesystems
    fusermount -u -z sandbox/local/sharebox.mnt > /dev/null
    fusermount -u -z sandbox/remote/sharebox.mnt > /dev/null

    clean
}

fuse
sync_success
sync_no_peers
sync_bad_url
sync_modify_url
sync_remove_peer
sync_normal_conflict
sync_resolve_normal_conflict_local
sync_resolve_normal_conflict_remote
sync_delete_conflict
